subdata <- data[-c(1,3:5,7,9,11,13,15)]
d <- dist(subdata, method = "euclidean")
plot(hclust(d, method="ward.D"), type = "unrooted",
cex = 0.4, no.margin = TRUE)
}; dev.off()
i <- 1
# Arbre -------------------------------------------------------------------
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
d <- dist(subdata, method = "euclidean")
plot(hclust(d, method="ward.D"), type = "unrooted",
cex = 0.4, no.margin = TRUE)
pdf("trees_hierarchy.pdf")
for (i in 1:length(files)) {
# Arbre -------------------------------------------------------------------
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
d <- dist(subdata, method = "euclidean")
plot(hclust(d, method="ward.D"), type = "unrooted",
cex = 0.4, no.margin = TRUE)
}; dev.off()
pdf("trees.pdf")
for (i in 1:length(files)) {
# Arbre -------------------------------------------------------------------
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
d <- dist(subdata, method = "euclidean")
plot(as.phylo(hclust(d, method="ward.D")), type = "unrooted",
cex = 0.4, no.margin = TRUE)
}; dev.off()
# Cluster -----------------------------------------------------------------
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
assign(paste("clustp_", i, sep = ""), recordPlot(clust_1))
clustp_8
summary(clustp_8)
pdf("cluster.pdf")
for (i in 1:length(files)) {
# Cluster
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
assign(paste("clustp_", i, sep = ""), recordPlot(clust_1))
write.csv(summary(get(name)), "clust_analysis.txt", append = T)
}
pdf("cluster.pdf")
for (i in 1:length(files)) {
# Cluster
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
assign(paste("clustp_", i, sep = ""), recordPlot(clust_1))
write.csv(summary(get(name)), "clust_analysis.txt", append = T)
}; dev.off()
i <- 1
# Cluster
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
assign(paste("clustp_", i, sep = ""), recordPlot(clust_1))
plot(get(name), what = "classification")
plot(name, what = "classification")
get(name)
plot(get(name), what = "classification")
name
plot(name, what = "classification")
plot(clust_1, what = "classification")
assign(name, Mclust(subdata))
plot(clust_1, what = "classification")
plot(clust_1)
dev.off()
plot(name, what = "classification")
plot(get(name), what = "classification")
write.csv(summary(get(name)), "clust_analysis.txt", append = T)
write.csv(name, "clust_analysis.txt",
)
write.csv(summary(get(name)), "clust_analysis.txt", append = T)
write.csv(name, "clust_analysis.txt", append = T)
write.table(name, "clust_analysis.txt", append = T)
write.csv(summary(get(name)), "clust_analysis.txt", append = T)
write.table(summary(get(name)), "clust_analysis.txt", append = T)
get(name)
summary(get(name))
write.table(summary(get(name)), "clust_analysis.txt", append = T)
write.table(name, "clust_analysis.txt")
write.table(summary(get(name)), "clust_analysis.txt", append = T)
capture.output(summary(get(name)), "clust_analysis.txt", append = T)
plot(get(name), what = "classification")
summary(get(name))
a <- summary(get(name))
capture.output(a, "clust_analysis.txt", append = T)
capture.output(a, "clust_analysis.txt")
capture.output(a, file = "clust_analysis.txt", append = T)
capture.output(a, file = "clust_analysis.txt", append = T)
pdf("cluster.pdf")
for (i in 1:length(files)) {
# Cluster
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
plot(get(name), what = "classification")
a <- summary(get(name))
capture.output(a, file = "clust_analysis.txt", append = T)
}; dev.off()
packageVersion("base")
d <- dist(subdata, method = "euclidean")
library(ape)
library(mclust)
files <- list.files(pattern = "csv")
i <- 1
# Arbre
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
d <- dist(subdata, method = "euclidean")
d
typeof(d)
View(d)
as.data.frame(d)
as.matrix(dist)
dist.matrix
as.matrix(d)
pdf("cluster.pdf")
for (i in 1:length(files)) {
# Cluster
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
plot(get(name), what = "classification")
a <- summary(get(name))
capture.output(a, file = "clust_analysis.txt", append = T)
}; dev.off()
pdf("cluster.pdf")
for (i in 1:length(files)) {
# Cluster
data <- read.csv(files[i], row.names = 2)
subdata <- data[-c(1,3:5,7,9,11,13,15)]
name <- paste("clust_", i, sep = "")
assign(name, Mclust(subdata))
plot(get(name), what = "classification")
a <- summary(get(name))
capture.output(a, file = "clust_analysis.txt", append = T)
}; dev.off()
library(factoextra)
install.packages("factoextra")
# BIC values used for choosing the number of clusters
fviz_mclust(clust_1, "BIC", palette = "jco")
library(factoextra)
# BIC values used for choosing the number of clusters
fviz_mclust(clust_1, "BIC", palette = "jco")
# BIC values used for choosing the number of clusters
fviz_mclust(clust_1, "BIC", palette = "jco")
# Classification: plot showing the clustering
fviz_mclust(mc, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
clust_1
plot.Mclust(clust_1)
save.image("~/OneDrive - Universitat de Valencia/RECERCA/PROJECTS/TFG/rubevo/cured/all_data_csv/clusters.RData")
load("~/OneDrive - Universitat de Valencia/RECERCA/PROJECTS/TFG/rubevo/cured/all_data_csv/clusters.RData")
# BIC values used for choosing the number of clusters
fviz_mclust(clust_1, "BIC", palette = "jco")
library(factoextra)
# BIC values used for choosing the number of clusters
fviz_mclust(clust_1, "BIC", palette = "jco")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
# Classification uncertainty
fviz_mclust(mc, "uncertainty", palette = "jco")
# Classification uncertainty
fviz_mclust(clust_1, "uncertainty", palette = "jco")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
theme_classic()
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
theme_bw()
#----Main theme----
main_theme <- theme(panel.border = element_rect(colour = "darkgrey", fill = NA, size = 0.5),
panel.background = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.direction = "horizontal",
legend.justification = c("right", "top"),
legend.position = c(.99, .99),
legend.background = element_blank(),
legend.text = element_text(colour = "black"),
legend.title = element_text(colour = "black"),
legend.key = element_rect(fill = NA, color = NA),
axis.ticks = element_line(colour = "darkgrey"),
axis.text = element_text(colour = "darkgrey"),
axis.title = element_text(colour = "darkgrey"),
plot.title = element_text(colour = "black"),
plot.subtitle = element_text(colour = "black"),
plot.caption = element_text(colour = "black"),
plot.tag = element_text(colour = "black", face = "bold"))
#----Plot minor ticks functions----
GeomTicks <- ggproto(
"GeomTicks", Geom,
extra_params = "",
handle_na = function(data, params) {
data
},
draw_panel = function(data,
panel_scales,
coord,
base = c(10, 10),
sides = c("b", "l"),
scaled = TRUE,
ticklength = unit(0.1, "cm"),
ticks_per_base = base - 1,
delog = c(x = TRUE, y = TRUE)) {
ticks <- list()
for (s in 1:length(sides)) {
if (grepl("[b|t]", sides[s])) {
xticks <- panel_scales$x.minor
# Make the grobs
if (grepl("b", sides[s])) {
ticks$x_b <- with(
data,
segmentsGrob(
x0 = unit(xticks, "npc"),
x1 = unit(xticks, "npc"),
y0 = unit(0, "npc"),
y1 = ticklength,
gp = gpar(
col = alpha(colour, alpha),
lty = linetype,
lwd = size * .pt
)
)
)
}
if (grepl("t", sides[s])) {
ticks$x_t <- with(
data,
segmentsGrob(
x0 = unit(xticks, "npc"),
x1 = unit(xticks, "npc"),
y0 = unit(1, "npc"),
y1 = unit(1, "npc") - ticklength,
gp = gpar(
col = alpha(colour, alpha),
lty = linetype,
lwd = size * .pt
)
)
)
}
}
if (grepl("[l|r]", sides[s])) {
yticks <- panel_scales$y.minor
# Make the grobs
if (grepl("l", sides[s])) {
ticks$y_l <- with(
data,
segmentsGrob(
y0 = unit(yticks, "npc"),
y1 = unit(yticks, "npc"),
x0 = unit(0, "npc"),
x1 = ticklength,
gp = gpar(
col = alpha(colour, alpha),
lty = linetype, lwd = size * .pt
)
)
)
}
if (grepl("r", sides[s])) {
ticks$y_r <- with(
data,
segmentsGrob(
y0 = unit(yticks, "npc"),
y1 = unit(yticks, "npc"),
x0 = unit(1, "npc"),
x1 = unit(1, "npc") - ticklength,
gp = gpar(
col = alpha(colour, alpha),
lty = linetype,
lwd = size * .pt
)
)
)
}
}
}
gTree(children = do.call("gList", ticks))
},
default_aes = aes(colour = "black", size = 0.5, linetype = 1, alpha = 1)
)
annotation_ticks <- function(sides = "b",
scale = "identity",
scaled = TRUE,
ticklength = unit(0.1, "cm"),
colour = "black",
size = 0.5,
linetype = 1,
alpha = 1,
color = NULL,
ticks_per_base = NULL,
...) {
if (!is.null(color)) {
colour <- color
}
# check for invalid side
if (grepl("[^btlr]", sides)) {
stop(gsub("[btlr]", "", sides), " is not a valid side: b,t,l,r are valid")
}
# split sides to character vector
sides <- strsplit(sides, "")[[1]]
if (length(sides) != length(scale)) {
if (length(scale) == 1) {
scale <- rep(scale, length(sides))
} else {
stop("Number of scales does not match the number of sides")
}
}
base <- sapply(scale, function(x) switch(x, "identity" = 10, "log10" = 10, "log" = exp(1)),
USE.NAMES = FALSE)
if (missing(ticks_per_base)) {
ticks_per_base <- base - 1
} else {
if ((length(sides) != length(ticks_per_base))) {
if (length(ticks_per_base) == 1) {
ticks_per_base <- rep(ticks_per_base, length(sides))
} else {
stop("Number of ticks_per_base does not match the number of sides")
}
}
}
delog <- scale %in% "identity"
layer(
data = data.frame(x = NA),
mapping = NULL,
stat = StatIdentity,
geom = GeomTicks,
position = PositionIdentity,
show.legend = FALSE,
inherit.aes = FALSE,
params = list(
base = base,
sides = sides,
scaled = scaled,
ticklength = ticklength,
colour = colour,
size = size,
linetype = linetype,
alpha = alpha,
ticks_per_base = ticks_per_base,
delog = delog,
...
)
)
}
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme
packageVersion("mclust")
pdf("cluster.pdf")
clust_1
plot(clust_1, what = "classification")
plot(clust_1, what = "classification")
dev.off()
plot(clust_1, what = "classification")
plot(clust_1)
summary(clust_1)
typeof(clust_1)
as.Mclust(clust_1)
library(mclust)
plot(clust_1, what = "classification")
pdf("cluster.pdf")
plot(clust_1, what = "classification")
plot(clust_2, what = "classification")
plot(clust_3, what = "classification")
plot(clust_4, what = "classification")
plot(clust_5, what = "classification")
plot(clust_6, what = "classification")
plot(clust_7, what = "classification")
plot(clust_8, what = "classification")
dev.off()
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco", ggtheme = main_theme)
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco", ggtheme = theme_bw()) +
main_theme
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco", ggtheme = theme_bw(base_line_size = 0)) +
main_theme
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco",
ggtheme = theme_void()) +
main_theme
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco",
ggtheme = theme_void()) +
main_theme +
theme(axis.ticks.length = unit(0.001, "mm"))
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.ticks.length = unit(0.001, "mm"))
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.ticks.length = unit(0.001, "mm")) +
labs(title = "")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.ticks.length = unit(0.001, "mm")) +
labs(title = "", subtitle = "")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line = unit(0, "mm")) +
labs(title = "", subtitle = "")
# Classification: plot showing the clustering
fviz_mclust(clust_1, "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = "")
for (i in 1:length(files)) {
assign(paste("clust_final_plot", i, sep = ""), fviz_mclust(paste("clust_", i, sep = ""), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
}
i <- 1
assign(paste("clust_final_plot", i, sep = ""), fviz_mclust(paste("clust_", i, sep = ""), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
assign(paste("clust_final_plot", i, sep = ""), fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
for (i in 1:length(files)) {
assign(paste("clust_final_plot", i, sep = ""), fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
}
paste("clust_final_plot", i, sep = "")
get(paste("clust_final_plot", i, sep = ""))
pdf("classif_plots", width = 6.5, height = 4)
for (i in 1:length(files)) {
assign(paste("clust_final_plot_", i, sep = ""), fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
get(paste("clust_final_plot", i, sep = ""))
}; dev.off()
pdf("classif_plots.pdf", width = 6.5, height = 4)
for (i in 1:length(files)) {
assign(paste("clust_final_plot_", i, sep = ""), fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = ""))
get(paste("clust_final_plot", i, sep = ""))
}; dev.off()
pdf("classif_plots.pdf", width = 6.5, height = 4)
for (i in 1:length(files)) {
fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = "")
}; dev.off()
pdf("classif_plots.pdf")
for (i in 1:length(files)) {
fviz_mclust(get(paste("clust_", i, sep = "")), "classification", geom = "point",
pointsize = 1.5, palette = "jco") +
main_theme +
theme(axis.line =  element_line(size = 0, colour = "grey80")) +
labs(title = "", subtitle = "")
}; dev.off()
clust_final_plot1
clust_final_plot_1
pdf("classif_plots.pdf", width = 6.5, height = 4)
clust_final_plot_1
clust_final_plot_2
clust_final_plot_3
clust_final_plot_4
clust_final_plot_5
clust_final_plot_6
clust_final_plot_7
clust_final_plot_8
dev.off()
